// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DomainPortServiceClient is the client API for DomainPortService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DomainPortServiceClient interface {
	PutPort(ctx context.Context, in *PutPortRequest, opts ...grpc.CallOption) (*PutPortResponse, error)
	GetPort(ctx context.Context, in *GetPortRequest, opts ...grpc.CallOption) (*GetPortResponse, error)
}

type domainPortServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDomainPortServiceClient(cc grpc.ClientConnInterface) DomainPortServiceClient {
	return &domainPortServiceClient{cc}
}

func (c *domainPortServiceClient) PutPort(ctx context.Context, in *PutPortRequest, opts ...grpc.CallOption) (*PutPortResponse, error) {
	out := new(PutPortResponse)
	err := c.cc.Invoke(ctx, "/api.DomainPortService/putPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainPortServiceClient) GetPort(ctx context.Context, in *GetPortRequest, opts ...grpc.CallOption) (*GetPortResponse, error) {
	out := new(GetPortResponse)
	err := c.cc.Invoke(ctx, "/api.DomainPortService/getPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DomainPortServiceServer is the server API for DomainPortService service.
// All implementations must embed UnimplementedDomainPortServiceServer
// for forward compatibility
type DomainPortServiceServer interface {
	PutPort(context.Context, *PutPortRequest) (*PutPortResponse, error)
	GetPort(context.Context, *GetPortRequest) (*GetPortResponse, error)
	mustEmbedUnimplementedDomainPortServiceServer()
}

// UnimplementedDomainPortServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDomainPortServiceServer struct {
}

func (UnimplementedDomainPortServiceServer) PutPort(context.Context, *PutPortRequest) (*PutPortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutPort not implemented")
}
func (UnimplementedDomainPortServiceServer) GetPort(context.Context, *GetPortRequest) (*GetPortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPort not implemented")
}
func (UnimplementedDomainPortServiceServer) mustEmbedUnimplementedDomainPortServiceServer() {}

// UnsafeDomainPortServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DomainPortServiceServer will
// result in compilation errors.
type UnsafeDomainPortServiceServer interface {
	mustEmbedUnimplementedDomainPortServiceServer()
}

func RegisterDomainPortServiceServer(s grpc.ServiceRegistrar, srv DomainPortServiceServer) {
	s.RegisterService(&DomainPortService_ServiceDesc, srv)
}

func _DomainPortService_PutPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainPortServiceServer).PutPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DomainPortService/putPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainPortServiceServer).PutPort(ctx, req.(*PutPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainPortService_GetPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainPortServiceServer).GetPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DomainPortService/getPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainPortServiceServer).GetPort(ctx, req.(*GetPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DomainPortService_ServiceDesc is the grpc.ServiceDesc for DomainPortService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DomainPortService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.DomainPortService",
	HandlerType: (*DomainPortServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "putPort",
			Handler:    _DomainPortService_PutPort_Handler,
		},
		{
			MethodName: "getPort",
			Handler:    _DomainPortService_GetPort_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
